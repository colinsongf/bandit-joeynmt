name: "reverse_experiment"

# This configuration file contains additional settings for self-regulated learning.

data:
    src: "src"
    trg: "trg"
   # hyp: "hyp"
    train: "test/data/reverse/train"
    dev: "test/data/reverse/dev"
    test: "test/data/reverse/test"
    level: "word"
    lowercase: False
    max_sent_length: 11
    voc_min_freq: 0
    voc_limit: 100
    #src_vocab: "my_model/src_vocab.txt"
    #trg_vocab: "my_model/trg_vocab.txt"

testing:
    beam_size: 10
    alpha: 1.0

training:
    #load_model: "my_model/3300.params"
    random_seed: 43
    optimizer: "adam"
    loss: "crossentropy"
    learning_rate: {"mt": 0.0001, "regulator": 0.003}
    learning_rate_min: 0.00002
#    clip_grad_val: 1.0
    weight_decay: 0.0
    normalization: "batch"  # "tokens"
    clip_grad_norm: 1.0
    batch_size: 10
    valid_batch_size: 10
    scheduling: "plateau"
    patience: 1
    decrease_factor: 0.5
    schedule_after_loss: True
    epochs: 10
    validation_freq: 10
    logging_freq: 100
    eval_metric: "bleu"
    model_dir: "uncertainty"
    overwrite: True
    shuffle: True
    use_cuda: False
    max_output_length: 11
    print_valid_sents: 3
    loss_weights: {"mt": 1.0, "regulator": 1.0}
    #load_model: "reverse_model/1000.ckpt"
    #load_regulator: "reverse_new/1003.ckpt"
    baseline: "first"  # baseline reward computation for regulator: mean, first, previous, False
    weak_baseline: False  # use a baseline reward for weak feedback
    weak_search: "offline"  # use offline targets for weak feedback
    entropy_regularizer: 0.0  # encourage exploration
    only_sup: "epsilon"  # only use this supervision mode, or "random", "fixed", "epsilon", "self", "full", "weak", "none"
    chunk_type: "sbleu"  # marking
    self_entropy: False  # encourage high entropy for self-training
    init_from_mt: True  # initialize the regulator parameters from the MT
    self_attention_drop: 0.5  # dropout on attention for self-training
    pe_ratio: 1.0  # ratio of possible post-edits that is performed
    epsilon: 0.5  # for epsilon greedy
    weighted_reward: False  # special weight for reward
    no_cost: False  # train if there is no cost
    alpha: 0.001  # added to the cost for avoiding divivision by 0

model:
    initializer: "xavier"
    embed_initializer: "normal"
    embed_init_weight: 0.1
    bias_initializer: "zeros"
    init_rnn_orthogonal: False
    lstm_forget_gate: 0.
    encoder:
        type: "lstm"
        embeddings:
            embedding_dim: 16
            scale: False
        hidden_size: 64
        bidirectional: True
        dropout: 0.1
        num_layers: 1
    decoder:
        type: "lstm"
        embeddings:
            embedding_dim: 16
            scale: False
        hidden_size: 64
        dropout: 0.1
        hidden_dropout: 0.1
        num_layers: 1
        input_feeding: True
        bridge: False
        attention: "bahdanau"
    regulator:
        type: "lstm"
        feed_trg: True
        embeddings:
            embedding_dim: 16
            scale: False
        hidden_size: 63
        middle_size: 31
        dropout: 0.1
        output_labels: ["self", "weak", "full"]  # supervision types that are available
        #["none", "self", "weak", "full"]
        num_layers: 2
        bidirectional: True
